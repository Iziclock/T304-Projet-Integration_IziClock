basePath: /
definitions:
  calendars.Token:
    properties:
      access_token:
        type: string
    type: object
  models.Alarm:
    properties:
      calendar:
        $ref: '#/definitions/models.Calendar'
      calendarID:
        type: integer
      createdAt:
        type: string
      description:
        type: string
      id:
        type: integer
      isActive:
        type: boolean
      lastUpdate:
        type: string
      locationEnd:
        type: string
      locationStart:
        type: string
      name:
        type: string
      ringDate:
        type: string
      ringtone:
        $ref: '#/definitions/models.Ringtone'
      ringtoneID:
        type: integer
      transport:
        type: string
      update:
        type: string
    type: object
  models.Calendar:
    properties:
      createdAt:
        type: string
      description:
        type: string
      id:
        type: integer
      idgoogle:
        description: Url       string    `gorm:"size:255; not null; uniqueIndex:idx_calendar_url"`
        type: string
      isActive:
        type: boolean
      name:
        type: string
      userID:
        description: |-
          ID string `gorm:"primaryKey;size 255;"` test abandonné
          UserID uint   `gorm:"not null; uniqueIndex:idx_calendar_name; uniqueIndex:idx_calendar_idgoogle"`
        type: integer
    type: object
  models.Ringtone:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      name:
        type: string
      url:
        type: string
    type: object
  models.User:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      name:
        type: string
      preparationTime:
        type: integer
      ringtone:
        $ref: '#/definitions/models.Ringtone'
      ringtoneID:
        type: integer
    type: object
  raspberry.AlarmResponse:
    properties:
      id:
        type: integer
      isActive:
        type: boolean
      name:
        type: string
      ringDate:
        type: string
      ringtone:
        $ref: '#/definitions/raspberry.RingtoneBrief'
      ringtoneID:
        type: integer
    type: object
  raspberry.RingtoneBrief:
    properties:
      id:
        type: integer
      name:
        type: string
      url:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: Il s'agit de la documentation de l'API IziClock.
  title: IziClock API Documentation
  version: "1.0"
paths:
  /alarms:
    get:
      description: Récupère une alarme depuis la DB à partir de son ID
      parameters:
      - description: Alarm ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Alarm send successfully
          schema:
            $ref: '#/definitions/models.Alarm'
        "404":
          description: Alarm not found
        "500":
          description: Internal Server Error
      summary: Récupère une alarme
      tags:
      - Alarmes
  /alarms/{id}:
    put:
      consumes:
      - application/json
      description: Met à jour les détails d'une alarme par ID
      parameters:
      - description: ID de l'alarme
        in: path
        name: id
        required: true
        type: integer
      - description: Détails de l'alarme
        in: body
        name: alarm
        required: true
        schema:
          $ref: '#/definitions/models.Alarm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Alarm'
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Met à jour les détails de l'alarme
      tags:
      - Alarmes
  /alarms/state/{id}:
    put:
      description: Modifie l'état d'activité d'une alarme en DB à partir de son ID
      parameters:
      - description: Alarm ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Alarm updated successfully
          schema:
            $ref: '#/definitions/models.Alarm'
        "404":
          description: Alarm not found
        "500":
          description: Internal Server Error
      summary: Modifie l'état d'activité d'une alarme
      tags:
      - Alarmes
  /calendars:
    get:
      description: Récupère une liste de tous les calendriers depuis la DB
      produces:
      - application/json
      responses:
        "200":
          description: Calendars send successfully
          schema:
            items:
              $ref: '#/definitions/models.Calendar'
            type: array
        "500":
          description: Internal Server Error
      summary: Récupère tous les calendriers
      tags:
      - Calendriers
  /calendars/{id}:
    delete:
      description: Efface un calendrier via son ID
      parameters:
      - description: Calendar ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Calendar deleted successfully
          schema:
            type: string
        "404":
          description: Calendar not found
        "500":
          description: Internal Server Error
      summary: Efface un calendrier
      tags:
      - Calendriers
  /calendars/api:
    get:
      description: Récupère tous les calendriers associés à l'utilisateur via l'API
        Google Calendar, ainsi que leurs événements à venir.
      produces:
      - application/json
      responses:
        "200":
          description: Calendriers et événements récupérés avec succès
          schema:
            type: string
        "400":
          description: Erreur dans la récupération des données
        "500":
          description: Erreur interne du serveur
      summary: Récupère les calendriers et leurs événements
      tags:
      - Calendriers
  /calendars/state/{id}:
    put:
      description: Change l'attribut d'activité d'un calendrier via l'identifiant
        de celui-ci
      parameters:
      - description: Calendar ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Calendar updated successfully
          schema:
            $ref: '#/definitions/models.Calendar'
        "404":
          description: Calendar not found
        "500":
          description: Internal Server Error
      summary: Change l'attribut d'activité d'un calendrier
      tags:
      - Calendriers
  /loginCalendar:
    get:
      consumes:
      - application/json
      description: Fournit un lien permettant à l'utilisateur de se connecter et d'autoriser
        l'accès en lecture seule à son calendrier Google.
      produces:
      - text/plain
      responses:
        "200":
          description: URL d'autorisation Google pour l'utilisateur
          schema:
            type: string
        "500":
          description: Erreur interne du serveur
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Génère un lien d'autorisation Google
      tags:
      - Authentification
  /ping:
    get:
      description: Renvoie un message 'pong' pour vérifier que le serveur est en ligne
      produces:
      - application/json
      responses:
        "200":
          description: Ping Pong
      summary: Envoie un ping
      tags:
      - Ping
  /raspberry:
    get:
      consumes:
      - application/json
      description: Retourne une liste des alarmes mises à jour ou proches de sonner.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/raspberry.AlarmResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Récupérer les alarmes mises à jour pour le Raspberry
      tags:
      - Raspberry
  /ringtones:
    get:
      description: Récupère une liste de toutes les sonneries depuis la DB
      produces:
      - application/json
      responses:
        "200":
          description: Ringtones send successfully
          schema:
            items:
              $ref: '#/definitions/models.Ringtone'
            type: array
        "500":
          description: Internal Server Error
      summary: Récupère toutes les sonneries
      tags:
      - Sonneries
  /ringtones/name/{id}:
    put:
      description: Modifie le nom d'une sonnerie en DB à partir de son ID
      parameters:
      - description: Ringtone ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Ringtone updated successfully
          schema:
            $ref: '#/definitions/models.Ringtone'
        "404":
          description: Ringtone not found
        "500":
          description: Internal Server Error
      summary: Modifie le nom d'une sonnerie
      tags:
      - Sonneries
  /ringtones/upload:
    post:
      description: Upload une nouvelle sonnerie et sauve son url dans la base de données
      parameters:
      - description: Fichier audio de la sonnerie à upload
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: File uploaded and transferred successfully
        "400":
          description: No file is received
        "409":
          description: Ringtone already exists
        "500":
          description: Unable to save the file
      summary: Upload une sonnerie
      tags:
      - Sonneries
  /token:
    post:
      consumes:
      - application/json
      description: Récupère un token sous format JSON envoyé dans la requête et l'enregistre
        dans un fichier local "token.json".
      parameters:
      - description: Token à enregistrer
        in: body
        name: token
        required: true
        schema:
          $ref: '#/definitions/calendars.Token'
      produces:
      - application/json
      responses:
        "200":
          description: Token sauvegardé avec succès
          schema:
            type: string
        "400":
          description: Erreur de traitement du token
        "500":
          description: Erreur lors de l'enregistrement du token
      summary: Sauvegarde un token envoyé dans la requête
      tags:
      - Calendriers
  /users/{id}:
    put:
      consumes:
      - application/json
      description: Update the details of a user with a fixed ID (currently hardcoded
        as ID=1).
      parameters:
      - description: Updated User Info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update user
      tags:
      - Users
  /users/first:
    get:
      description: Retrieve the first user from the database, ordered by creation
        date.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get the first user
      tags:
      - Users
swagger: "2.0"
